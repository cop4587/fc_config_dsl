#!/usr/bin/env ruby

require "yaml"
require "fileutils"
require "pathname"

require_relative "../lib/yaml_dsl"
require_relative "../lib/conf_dsl"

MODULES = [:IMBS, :IMAS, :QS]
ITEMS   = [:conf, :data, :bin]
GROUPS  = [:ps, :ns]

CONF_FILE_EXT = 'conf'
YAML_FILE_EXT = 'des'

@operations = Hash.new
@output_    = Hash.new
@dest_      = Hash.new
@modified_files = Hash.new []

def deploy(mod)
  raise "Unknown module - #{mod}. Current supports #{MODULES}" unless MODULES.include? mod
  @mod = mod.to_s.downcase
  yield if block_given?
end

def config(item)
  raise "Unknown item - #{item}. Current supports #{ITEMS}" unless ITEMS.include? item
  @item = item.to_s.downcase
  yield if block_given?
end

def group(name)
  raise "Unknown group - #{name}. Current supports #{GROUPS}" unless GROUPS.include? name
  @group = name.to_s.downcase
end

def load_platform_descriptor!
  raise "Platform descriptor not found - #{ARGV[0]}" unless File.exist? ARGV[0]
  @platform = ARGV[0][0..-4]
  load ARGV[0]
end

def output_(path)
  file_name = path.split('/')[-1]
  output_path = "../../output/#@platform/#@mod/#@item/#{file_name}"
  output_path
end

def define_operation(name)
  Kernel.send :define_method, name do |group_name, file_name, &action_bundle|
    group(group_name)
    path = "../../#@mod/#@item/#@group/#{file_name}"
    raise "SVN base file not found - #{path}" unless File.exist? path or name == :create

    action_bundle_chain =  @operations[path]? @operations[path] : []
    action_bundle_chain << action_bundle
    @operations[path] = action_bundle_chain
    @output_[path] = output_(path)
  end
end

[:create, :modify].each { |name| define_operation name }

def dsl_for(path)
  case path
    when /\.#{YAML_FILE_EXT}$/
      Deployment::YamlDSL.new
    when /\.#{CONF_FILE_EXT}$/
      Deployment::ConfDSL.new
  end
end

def register_modified(path)
  path_name = Pathname.new(path)
  dir  = path_name.dirname.to_s
  file = path_name.basename.to_s
  @modified_files[dir] = @modified_files[dir] << file
  @dest_[dir] = Pathname.new(@output_[path]).dirname.to_s
end

def cp_unchanged_to_output
  @modified_files.each_pair do |dir, modified_files|
    files_to_cp = Dir.entries(dir) - ['.', '..'] - modified_files
    files_to_cp.each do |file|
      FileUtils.cp "#{dir}/#{file}", "#{@dest_[dir]}/#{file}"
    end
  end
end

load_platform_descriptor!

@operations.each_pair do |path, action_bundle_chain|
  dsl = dsl_for path
  dsl.load path

  action_bundle_chain.each do |action_bundle|
    dsl.instance_eval &action_bundle
  end

  dsl.dump @output_[path]
  register_modified path
end

cp_unchanged_to_output
